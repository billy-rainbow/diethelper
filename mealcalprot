#!/usr/bin/python

# Reading the backup file isn't working right now.  For evey line of the file "ERROR:  5  items required, only  4  were given, quit or retry..." is returned.
import sys, os, shutil

data      = []
prog      = sys.argv[ 0 ]
reqitemct = 5

outfile   = '/tmp/tf.' + os.path.basename( prog )
reusefile = '/tmp/tf.' + os.path.basename( prog ) + '.bak'

# Prompt for user input
print( '\033[1m', end='' )
print( "                        base    cal /   protein /" )
print( "item            amount  amount  amount  amount\033[0m     (space entries with tabs, 'q' to calculate & quit)" )

# get data from user and write a copy of the input to a file
with open( outfile, 'w' ) as outf:
    while True:
        fdata = input().split()
        fdatalen = len( fdata )
        if( fdatalen == 0 ):  # no data was entered, call it done
            break
        flag = fdata[ 0 ]  # the user can also enter a solo 'q' terminate
        if( len( fdata[ 0 ]) == 1 and flag == 'q' ):
            break
        if( fdatalen != reqitemct ):  # this program requires an exact number of entries per line
            print( 'ERROR: ', reqitemct, ' items required, only ', fdatalen, ' were given, quit or retry...' )
            continue
        item, amount, ref_amt, cal_ref_amt, prot_ref_amt = fdata

        # create a file with a backup of the input in case the user wants to re-user or check it
        outf.write( f'{item}\t{amount}\t{ref_amt}\t{cal_ref_amt}\n' )

        # Calculate and add derived values
        rel_ref_amt = float( amount ) / float( ref_amt )
        cal_ct = rel_ref_amt * float( cal_ref_amt )
        prot_ct = rel_ref_amt * float( prot_ref_amt )

        # Append data to matrix
        data.append([ item, amount, ref_amt, cal_ref_amt, prot_ref_amt, cal_ct, prot_ct ])

# The output file needs to end with a blank line or its re-use fails.
with open( outfile, 'a' ) as outf:
    outf.write( '\n' )
    
# Print header row
print( '\033[1m' )
print( "Item              Amount Ref_Amt cal/ref prot/ref cal/amt prot/amt\033[0m" )

# Print data rows
for item, amount, ref_amt, cal_ref_amt, prot_ref_amt, cal_ct, prot_ct in data:
    print(
        f"{item:<16} {amount:>7} {ref_amt:>7} {cal_ref_amt:>7} {float( prot_ref_amt ):>8.1f} \033[1m{cal_ct:>7.0f} {float( prot_ct ):>8.1f}\033[0m"
    )

# Calculate and print totals
total_amount = sum( float(amount) for item, amount, _, _, _, _, _ in data )
total_cal_ct = sum( float( cal_ct ) for item, amount, _, _, _, cal_ct, _ in data )
total_prot_ct = sum( float(prot_ct) for item, amount, _, _, _, _, prot_ct in data )

print( "-" * 70 )
print( f"Totals:\t\033[1m{total_amount:.0f}\t{total_cal_ct:.0f}\t{total_prot_ct:.1f}\033[0m" )
try:
    shutil.copyfile( outfile, reusefile )
    print( f'\tgrams\tcals\tprotein\t\tinput data copy @ \033[1m{reusefile}\033[0m' )
except OSError as emsg:
    printf( f"Error copying file: {emsg}" )
