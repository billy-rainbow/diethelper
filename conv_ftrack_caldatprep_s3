#!/usr/bin/python
# Modified from prototype supplied by OpenGPT (OpiAI)

import re

# Input and output file names
input_filename  = "calct-3.dat"
output_filename = "calct-4.dat"

def validate_and_process_line( line ):
    parts = line.strip().split( ":", 1 )  # Split the line into name and set of values
    if len( parts ) != 2:
        return None                       # Reject if there's no colon or malformed line
    
    name = parts[ 0 ].strip()
    values = parts[ 1 ].strip().split()
    print( f"\tname:{name}, values:{values}" )
    
    value_count = len( values )
    if value_count < 3 or value_count > 4:      # Check if the number of value fields is valid (3 or 4)
        return None
    
    expected_units = [ None, "g", "c", "p" ]    # Define expected units
    output = [name]                             # Initialize the output line
    
    if value_count == 3:                        # Handle the case where there's only 3 fields (prepend "null")
        output.append( "null" )
        start_idx = 1
    else:
        start_idx = 0
    print( f"\t\toutput:{output}" )
    
    for i, value in enumerate( values, start=start_idx ):
        print( f"\t\t\tvalue:{value}  ", end="" )
        match = re.match( r"^([\d.]+)([a-zA-Z]{1,3})$", value )     # Extract number and unit using regex
        if not match:
            return None                                             # Reject if the format is incorrect
        print( f"\t\t\tmatch:{match}", end="" )
        
        num, unit = match.groups()
        print( f"\t\t\t\tnum:{num}  unit:{unit}" )
        if expected_units[ i ] and unit != expected_units[ i ]:     # Validate the unit for the specific column (if applicable)
            return None        

        output.append( f"{num}{unit}" )                             # Append the number (with its unit preserved) to the output
    
    return "\t".join( output )                                      # Join the output as a tab-delimited line

def process_file( input_file, output_file ):
    with open( input_file, "r" ) as infile, open( output_file, "w" ) as outfile:
        for line in infile:
            processed_line = validate_and_process_line( line )
            if processed_line:
                outfile.write( processed_line + "\n" )
            else:
                print( f"Rejected line: {line.strip()}" )

def main():
    process_file( input_filename, output_filename )
    print( f"Processing complete. Check '{output_filename}' for results." )

if __name__ == "__main__":
    main()
